function n(n){return n&&n.__esModule?n.default:n}let e=!1;function o(n,e,o){const t=n.createShader(e);return n.shaderSource(t,o),n.compileShader(t),n.getShaderParameter(t,n.COMPILE_STATUS)?t:(console.warn("An error occurred compiling the shaders: "+n.getShaderInfoLog(t)),n.deleteShader(t),null)}function t(t={}){const r=document.getElementById("backsplash");if(!r)return!1;var i;const a=null===(i=t.animate)||void 0===i||i,c=r.getContext("webgl",{antialias:!1,preserveDrawingBuffer:!a});var l,s;r.width=null!==(l=t.width)&&void 0!==l?l:r.clientWidth,r.height=null!==(s=t.height)&&void 0!==s?s:r.clientHeight,t.width&&t.height||window.addEventListener("resize",(()=>{var n,e;r.width=null!==(n=t.width)&&void 0!==n?n:r.clientWidth,r.height=null!==(e=t.height)&&void 0!==e?e:r.clientHeight}));let v=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,v),c.bufferData(c.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),c.STATIC_DRAW);const d=function(e){const t=o(e,e.VERTEX_SHADER,"\nattribute vec2 aVertexPosition;\nvoid main() {\n  gl_Position = vec4(aVertexPosition, 0, 1);\n}");if(!t)return null;const r=o(e,e.FRAGMENT_SHADER,n("#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#define GLSLIFY 1\n#endif\n\nuniform vec3 iResolution;\nuniform float iTime;\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n  // Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients\n  // ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat Bayer2(vec2 a) {\n  a = floor(a);\n  return fract(a.x / 2. + a.y * a.y * .75);\n}\n\n#define Bayer4(a)   (Bayer2 (.5 *(a)) * .25 + Bayer2(a))\n#define Bayer8(a)   (Bayer4 (.5 *(a)) * .25 + Bayer2(a))\n#define Bayer16(a)  (Bayer8 (.5 *(a)) * .25 + Bayer2(a))\n#define Bayer32(a)  (Bayer16(.5 *(a)) * .25 + Bayer2(a))\n#define Bayer64(a)  (Bayer32(.5 *(a)) * .25 + Bayer2(a))\n\nvec2 hexPixel(vec2 point) {\n  const float HEX_SIZE = 24.0;\n  vec2 scalePoint = point / (HEX_SIZE * sqrt(3.0));\n  float tmp = floor(scalePoint.x + sqrt(3.0) * scalePoint.y + 1.0);\n  float q = floor((floor(2.0 * scalePoint.x + 1.0) + tmp) / 3.0);\n  float r = floor((tmp + floor(-scalePoint.x + sqrt(3.0) * scalePoint.y + 1.0)) / 3.0);\n  return vec2(q, r);\n}\n\nfloat dither(float amount) {\n  const float STEPS = 8.0;\n  float threshold = Bayer32(gl_FragCoord.xy / 2.0);\n  float ditherAmount = fract(amount * STEPS);\n  float bias = float(ditherAmount > threshold) / STEPS;\n  return clamp(floor(amount * STEPS) / STEPS + bias, 0.0, 1.0);\n}\n\nfloat vig() {\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\n  uv *= 1.0 - uv.yx;\n  return pow(uv.x * uv.y * 256.0, 0.125);\n}\n\nvoid main()\n{\n  vec3 noiseInput = vec3(hexPixel(gl_FragCoord.xy) / 12.0, iTime / 32.0);\n  float ditherNoise = (snoise(noiseInput) + 1.0) / 2.0;\n\n  // vec4 mainColor = vec4(0.89804, 0.19608, 0.39608, 1.0); // 227, 50, 101\n  vec4 mainColor = vec4(0.282352, 0.9647058, 0.6431372, 1.0);\n  // vec4 mainColor = vec4(1.0, 0.6, 0.0, 1.0);\n  vec4 backgroundColor = vec4(0.06667, 0.07059, 0.11373, 1.0); // 17, 18, 29\n  // vec4 mainColor = vec4(1.0, 1.0, 1.0, 2.0) - backgroundColor;\n  // vec4 mainColor = vec4(0.9333, 0.9137, 0.7178, 1.0);\n\n  float mixWithBias = clamp((dither(ditherNoise) - 0.45) - (1.0 - vig()), 0.0, 1.0);\n  gl_FragColor = mix(backgroundColor, mainColor, mixWithBias);\n}\n"));if(!r)return null;const i=e.createProgram();return e.attachShader(i,t),e.attachShader(i,r),e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS)?i:(console.warn("Unable to initialize the shader program: "+e.getProgramInfoLog(i)),null)}(c);if(!d)return!1;c.useProgram(d);const x=Date.now(),m={program:d,attribLocations:{vertexPosition:c.getAttribLocation(d,"aVertexPosition")},uniformLocations:{inputResolution:c.getUniformLocation(d,"iResolution"),inputTime:c.getUniformLocation(d,"iTime")}};return function n(){c.viewport(0,0,r.width,r.height),c.clearColor(0,0,0,1),c.clear(c.COLOR_BUFFER_BIT|c.DEPTH_BUFFER_BIT),c.enableVertexAttribArray(m.attribLocations.vertexPosition),c.vertexAttribPointer(m.attribLocations.vertexPosition,2,c.FLOAT,!1,0,0),c.uniform3f(m.uniformLocations.inputResolution,r.width,r.height,0),c.uniform1f(m.uniformLocations.inputTime,(Date.now()-x)/1e3),c.drawArrays(c.TRIANGLES,0,6),a&&!e&&window.requestAnimationFrame(n)}(),!0}document.addEventListener("DOMContentLoaded",(function(){const n=window.matchMedia("(prefers-reduced-motion: reduce)");if(e=n.matches,n.addEventListener("change",(()=>e=n.matches)),e||!t()){const n=document.createElement("div");n.className="image",document.getElementById("backsplash-container").appendChild(n)}}),!1);
//# sourceMappingURL=index.8e0a0ff9.js.map
