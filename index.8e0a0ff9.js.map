{"mappings":"qDAaEA,GAAuB,WAElBC,EAAiCC,EAAAC,EAAAC,SACpCC,EAAQH,EAAgDI,aAAAH,GAG1D,sBAFKE,EAAaD,mBACLC,GACZH,EAAAK,mBAAAF,EAAAH,EAAAM,gBAOGH,GALJI,QAAOC,KAAM,4CAAAR,EAAAS,iBAAAN,IACdH,EAAAU,aAAAP,GAEQ,eAuBSQ,EAAeC,EAAA,IAE/B,MAAMC,EAAKC,SAAWC,eAAqB,kBACzCF,EAAW,OAAK,MAChBG,EACF,MAACC,EAAA,QAAAD,EAAAJ,EAAAK,eAAA,IAAAD,GAAAA,EAEkBhB,EAAaa,EAAAK,WAAA,QAAA,CAAhCC,WAAW,EACSC,uBAAcH,IAElC,IAAEI,EACAC,IAAmBC,MAAa,QAAAF,EAAAT,EAAAW,aAAA,IAAAF,EAAAA,EAAAR,EAAAW,cACZC,OAAc,QAAAH,EAAAV,EAAAa,cAAA,IAAAH,EAAAA,EAAAT,EAAAa,aAAlCd,EAAAW,OAAiBX,EAAGa,QAAAE,OAAQC,iBAAR,UAAc,KACnC,IAAAC,EAGEC,EADCjB,EAAWU,MAAa,QAAZM,EAAYjB,EAAAW,aAAA,IAAAM,EAAAA,EAAAhB,EAAAW,YAEzBX,EACDY,OACkB,QADfK,EACClB,EAAAa,cAAc,IAAAK,EAAAA,EAAAjB,EAAAa,oBACVK,EAAI/B,EAAAgC,4BACNhC,EAAAiC,aAAAF,gBAAM/B,EAAAiC,aAAA,IAAAC,aAAA,EACV,GAAU,EACV,GAAU,GACN,EAAE,GACF,EAAG,EACT,GAGG,EACH,EAEC,IAEHlC,EAAMmC,aAEN,MAAMC,WAvDyBpC,GAE/B,MAAMqC,EAAatC,EAAaC,EAAAA,EAAAsC,cA5BV,qGA6BtB,IAAGD,EAAa,OAAS,KACzB,MAAGE,EAAoBxC,EAAgBC,EAAAA,EAAAwC,gBAAAC,EChC1B,siIDiCb,IAAGF,EAAY,OAAO,KAEtB,MAAKH,EAAGpC,EAAA0C,gBAKR,sBAJcN,EAA4CC,kBAC7CD,EAAAG,GACbvC,EAAC2C,YAAAP,GAEDpC,EAAO4C,oBAAOR,EAAApC,EAAA6C,aAIRT,GAHP7B,QAAAC,KAAA,4CAAAR,EAAA8C,kBAAAV,IAEQ,MAwCDW,CAAe/C,SACnB,OAAO,eACPoC,WACEY,KAAcC,MACfC,EAAA,CACDd,QAAAA,kBACE,CACAe,eAAcnD,EAAAoD,kBAAmBhB,EAAgB,oBAEpDiB,iBAAA,iBAEkBrD,EAAAsD,mBAAAlB,EAAA,eACdmB,UAAYvD,EAAGsD,mBAAkBlB,EAAU,WAqBhD,gBAjBKoB,IACHxD,EAAGyD,SAAA,EAAA,EAAA5C,EAAoBU,MAAYV,EAAAY,QACnCzB,EAAG0D,WAAU,EAAA,EAAA,EAAA,GACb1D,EAAG2D,MAAA3D,EAAS4D,iBAAa5D,EAAA6D,kBAEzB7D,EAAG8D,wBAAuBZ,EAAMa,gBAAAZ,gBAEhCnD,EAAEgE,oBAAad,EAAAa,gBAAAZ,eACN,EAAAnD,EAAAiE,OAAA,EAAA,EAAsB,GAChCjE,EAAAkE,UAAAhB,EAAAG,iBAAAc,gBAAAtD,EAAAU,MAAAV,EAAAY,OAAA,GAEDzB,EAAMoE,UAAAlB,EAAAG,iBAAAE,WAAAP,KAAAC,MAAAoB,GAAA,KACNrE,EAAOsE,WAAItE,EAAAuE,UAAA,EAAA,GACZtD,IAAAnB,GAAA6B,OAAA6C,sBAAAhB,GAGCA,IACA,2DAGA,MAAGiB,EAAA9C,OAAA+C,WAAA,oCAIH,KAH0CD,EAAAE,UACpC/C,iBAAmB,UAAA,IAAA9B,EAAA2E,EAAAE,UAExB7E,IAAAa,IAAA,CACF,MAAAiE,EAAA9D,SAAA+D,cAAA,OAEOD,EAACE,UAAA","sources":["src/hex/index.ts","src/hex/noise.frag"],"sourcesContent":["import fragmentShaderSource from \"./noise.frag\";\n\nconst vertexShaderSource = `\nattribute vec2 aVertexPosition;\nvoid main() {\n  gl_Position = vec4(aVertexPosition, 0, 1);\n}`;\n\nlet prefersReducedMotion = false;\n\nfunction loadShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.warn('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\nfunction createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n  if(!vertexShader) return null;\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n  if(!fragmentShader) return null;\n\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.warn('Unable to initialize the shader program: ' + gl.getProgramInfoLog(program));\n    return null;\n  }\n\n  return program;\n}\n\nfunction renderBacksplash(options: { width?: number, height?: number, animate?: boolean } = {}): boolean {\n  const backsplash = document.getElementById(\"backsplash\") as HTMLCanvasElement | null;\n  if (!backsplash) return false;\n\n  const animate = options.animate ?? true;\n\n  const gl = backsplash.getContext(\"webgl\", {\n    antialias: false,\n    preserveDrawingBuffer: !animate\n  });\n\n  backsplash.width = options.width ?? backsplash.clientWidth;\n  backsplash.height = options.height ?? backsplash.clientHeight;\n\n  if(!options.width || !options.height) window.addEventListener('resize', () => {\n    backsplash.width = options.width ?? backsplash.clientWidth;\n    backsplash.height = options.height ?? backsplash.clientHeight;\n  });\n\n  let buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([\n      -1.0, -1.0,\n       1.0, -1.0,\n      -1.0,  1.0,\n      -1.0,  1.0,\n       1.0, -1.0,\n       1.0,  1.0]),\n    gl.STATIC_DRAW\n  );\n\n  const program = createProgram(gl);\n  if(!program) return false;\n\n  gl.useProgram(program);\n\n  const startTime = Date.now();\n\n  const programInfo = {\n    program,\n    attribLocations: {\n      vertexPosition: gl.getAttribLocation(program, \"aVertexPosition\")\n    },\n    uniformLocations: {\n      inputResolution: gl.getUniformLocation(program, \"iResolution\"),\n      inputTime: gl.getUniformLocation(program, \"iTime\")\n    },\n  };\n\n  function render() {\n    gl.viewport(0, 0, backsplash.width, backsplash.height);\n    gl.clearColor(0, 0, 0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\n    gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform3f(programInfo.uniformLocations.inputResolution, backsplash.width, backsplash.height, 0.0);\n    gl.uniform1f(programInfo.uniformLocations.inputTime, (Date.now() - startTime) / 1000);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    if(animate && !prefersReducedMotion)\n      window.requestAnimationFrame(render);\n  }\n\n  render();\n  return true;\n}\n\nfunction run() {\n  const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n  prefersReducedMotion = mediaQuery.matches;\n  mediaQuery.addEventListener('change', () => prefersReducedMotion = mediaQuery.matches);\n\n  if(prefersReducedMotion || !renderBacksplash()) {\n    const div = document.createElement(\"div\");\n    div.className = \"image\";\n    document.getElementById(\"backsplash-container\").appendChild(div);\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', run, false);\n","#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform vec3 iResolution;\nuniform float iTime;\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n  // Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients\n  // ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat Bayer2(vec2 a) {\n  a = floor(a);\n  return fract(a.x / 2. + a.y * a.y * .75);\n}\n\n#define Bayer4(a)   (Bayer2 (.5 *(a)) * .25 + Bayer2(a))\n#define Bayer8(a)   (Bayer4 (.5 *(a)) * .25 + Bayer2(a))\n#define Bayer16(a)  (Bayer8 (.5 *(a)) * .25 + Bayer2(a))\n#define Bayer32(a)  (Bayer16(.5 *(a)) * .25 + Bayer2(a))\n#define Bayer64(a)  (Bayer32(.5 *(a)) * .25 + Bayer2(a))\n\nvec2 hexPixel(vec2 point) {\n  const float HEX_SIZE = 24.0;\n  vec2 scalePoint = point / (HEX_SIZE * sqrt(3.0));\n  float tmp = floor(scalePoint.x + sqrt(3.0) * scalePoint.y + 1.0);\n  float q = floor((floor(2.0 * scalePoint.x + 1.0) + tmp) / 3.0);\n  float r = floor((tmp + floor(-scalePoint.x + sqrt(3.0) * scalePoint.y + 1.0)) / 3.0);\n  return vec2(q, r);\n}\n\nfloat dither(float amount) {\n  const float STEPS = 8.0;\n  float threshold = Bayer32(gl_FragCoord.xy / 2.0);\n  float ditherAmount = fract(amount * STEPS);\n  float bias = float(ditherAmount > threshold) / STEPS;\n  return clamp(floor(amount * STEPS) / STEPS + bias, 0.0, 1.0);\n}\n\nfloat vig() {\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\n  uv *= 1.0 - uv.yx;\n  return pow(uv.x * uv.y * 256.0, 0.125);\n}\n\nvoid main()\n{\n  vec3 noiseInput = vec3(hexPixel(gl_FragCoord.xy) / 12.0, iTime / 32.0);\n  float ditherNoise = (snoise(noiseInput) + 1.0) / 2.0;\n\n  // vec4 mainColor = vec4(0.89804, 0.19608, 0.39608, 1.0); // 227, 50, 101\n  vec4 mainColor = vec4(0.282352, 0.9647058, 0.6431372, 1.0);\n  // vec4 mainColor = vec4(1.0, 0.6, 0.0, 1.0);\n  vec4 backgroundColor = vec4(0.06667, 0.07059, 0.11373, 1.0); // 17, 18, 29\n  // vec4 mainColor = vec4(1.0, 1.0, 1.0, 2.0) - backgroundColor;\n  // vec4 mainColor = vec4(0.9333, 0.9137, 0.7178, 1.0);\n\n  float mixWithBias = clamp((dither(ditherNoise) - 0.45) - (1.0 - vig()), 0.0, 1.0);\n  gl_FragColor = mix(backgroundColor, mainColor, mixWithBias);\n}\n"],"names":["$7bcead58f6c14fe5$var$prefersReducedMotion","$7bcead58f6c14fe5$var$loadShader","gl","type","source","shader","createShader","getShaderParameter","COMPILE_STATUS","console","warn","getShaderInfoLog","deleteShader","$7bcead58f6c14fe5$var$renderBacksplash","options","backsplash","document","getElementById","_animate","animate","getContext","antialias","preserveDrawingBuffer","_width1","_height1","width","clientWidth","height","clientHeight","window","addEventListener","_width","_height","buffer","createBuffer","ARRAY_BUFFER","Float32Array","STATIC_DRAW","program","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","$parcel$interopDefault","createProgram","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","$7bcead58f6c14fe5$var$createProgram","Date","now","programInfo","vertexPosition","getAttribLocation","uniformLocations","getUniformLocation","inputTime","render","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enableVertexAttribArray","attribLocations","vertexAttribPointer","FLOAT","uniform3f","inputResolution","uniform1f","startTime","drawArrays","TRIANGLES","requestAnimationFrame","mediaQuery","matchMedia","matches","div","createElement","className"],"version":3,"file":"index.8e0a0ff9.js.map"}